{
  "blockchain_integration": {
    "description": "Интеграция с блокчейном VANA для регистрации данных",
    "contract": "DataRegistryImplementation",
    "network": "Moksha Testnet (Chain ID: 14800)"
  },
  "storj_integration": {
    "description": "Интеграция с Storj для децентрализованного хранения файлов",
    "endpoint": "https://gateway.storjshare.io"
  },
  "data_flow": {
    "step_1_storj_upload": {
      "description": "Загрузка файла в Storj",
      "endpoint": "POST /api/storj/upload",
      "request": {
        "file": "FormData с .ogg файлом",
        "walletAddress": "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
      },
      "response": {
        "success": true,
        "data": {
          "fileId": "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6_1705314000000_voice_sample.ogg",
          "fileName": "voice_sample.ogg",
          "fileSize": 2048576,
          "fileHash": "a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef1234",
          "fileUrl": "https://gateway.storjshare.io/bucket/0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6_1705314000000_voice_sample.ogg",
          "uploadedAt": "2024-01-15T10:40:00.000Z"
        }
      }
    },
    "step_2_blockchain_registration": {
      "description": "Регистрация данных в блокчейне",
      "contract_function": "addRefinement",
      "parameters": {
        "fileHash": "a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef1234",
        "metadata": "{\"fileName\":\"voice_sample.ogg\",\"fileSize\":2048576,\"walletAddress\":\"0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6\",\"uploadedAt\":\"2024-01-15T10:40:00.000Z\",\"fileType\":\"audio/ogg\"}",
        "fileUrl": "https://gateway.storjshare.io/bucket/0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6_1705314000000_voice_sample.ogg"
      },
      "transaction": {
        "hash": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef",
        "status": "success",
        "blockNumber": 1234567,
        "gasUsed": "150000",
        "effectiveGasPrice": "20000000000"
      }
    },
    "step_3_refiner_processing": {
      "description": "Отправка данных в refiner для обработки",
      "endpoint": "POST https://api.refiner.vana.com/refine",
      "request": {
        "refiner_id": "default-refiner",
        "audio_url": "https://gateway.storjshare.io/bucket/0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6_1705314000000_voice_sample.ogg",
        "metadata": {
          "wallet_address": "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6",
          "file_name": "voice_sample.ogg",
          "file_size": 2048576,
          "uploaded_at": "2024-01-15T10:40:00.000Z",
          "user_data": {
            "country": "United States",
            "birth_month": "March",
            "birth_year": "1990",
            "is_it_related": "yes",
            "location": {
              "latitude": 40.7128,
              "longitude": -74.0060,
              "accuracy": 15.5,
              "timestamp": "2024-01-15T10:35:00.000Z"
            }
          }
        }
      }
    }
  },
  "contract_interactions": {
    "data_registry": {
      "contract_address": "0x8C8788f98385F6ba1adD4234e551ABba0f82Cb7C",
      "functions": {
        "addRefinement": {
          "description": "Добавляет данные о файле в реестр",
          "parameters": [
            "fileHash (bytes32) - хеш файла",
            "metadata (string) - метаданные в JSON формате",
            "fileUrl (string) - URL файла в Storj"
          ],
          "events": [
            "RefinementAdded - событие успешной регистрации"
          ]
        },
        "getRefinement": {
          "description": "Получает данные о файле по хешу",
          "parameters": [
            "fileHash (bytes32) - хеш файла"
          ],
          "returns": [
            "metadata (string) - метаданные файла",
            "fileUrl (string) - URL файла",
            "timestamp (uint256) - время регистрации"
          ]
        }
      }
    }
  },
  "file_processing_pipeline": {
    "description": "Полный пайплайн обработки файлов",
    "steps": [
      {
        "step": 1,
        "action": "File Upload to Storj",
        "description": "Загрузка .ogg файла в децентрализованное хранилище",
        "api": "/api/storj/upload",
        "output": "fileUrl, fileHash"
      },
      {
        "step": 2,
        "action": "Blockchain Registration",
        "description": "Регистрация хеша файла и метаданных в блокчейне",
        "contract": "DataRegistry.addRefinement()",
        "output": "transactionHash"
      },
      {
        "step": 3,
        "action": "Refiner Processing",
        "description": "Отправка данных в VANA refiner для анализа",
        "api": "https://api.refiner.vana.com/refine",
        "output": "processingJobId"
      },
      {
        "step": 4,
        "action": "Validation Request",
        "description": "Запрос валидации от TEE узлов",
        "api": "TEE Pool validation",
        "output": "validationStatus"
      },
      {
        "step": 5,
        "action": "Attestation",
        "description": "Получение аттестации и записи в блокчейн",
        "contract": "TeePool.attest()",
        "output": "attestationHash"
      }
    ]
  },
  "error_handling": {
    "storj_upload_failed": {
      "error": "Failed to upload to Storj",
      "fallback": "Retry upload or use alternative storage",
      "user_message": "File upload failed. Please try again."
    },
    "blockchain_transaction_failed": {
      "error": "Blockchain transaction failed",
      "fallback": "Retry transaction with higher gas",
      "user_message": "Blockchain registration failed. Please try again."
    },
    "refiner_processing_failed": {
      "error": "Refiner processing failed",
      "fallback": "Retry processing or queue for later",
      "user_message": "Data processing failed. Please try again later."
    }
  },
  "environment_variables": {
    "required": {
      "STORJ_ACCESS_KEY": "Access key for Storj",
      "STORJ_SECRET_KEY": "Secret key for Storj",
      "STORJ_BUCKET_NAME": "Bucket name in Storj",
      "REFINEMENT_ENDPOINT": "VANA refiner API endpoint",
      "REFINER_ID": "Refiner ID for processing",
      "REFINEMENT_ENCRYPTION_KEY": "Encryption key for refiner"
    },
    "optional": {
      "STORJ_ENDPOINT": "Custom Storj endpoint (default: gateway.storjshare.io)",
      "NEXT_PUBLIC_DLP_CONTRACT_ADDRESS": "Custom DLP contract address"
    }
  },
  "security_considerations": {
    "file_encryption": "Files are encrypted before upload to Storj",
    "hash_verification": "File hashes are verified on blockchain",
    "access_control": "Only wallet owner can register their files",
    "data_privacy": "User data is anonymized in refiner processing"
  }
} 